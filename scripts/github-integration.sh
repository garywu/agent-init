#!/usr/bin/env bash
# GitHub Integration Script - Link sessions to GitHub issues and activity
# Part of claude-init enhancement for persistent context tracking

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Configuration
PROJECT_ROOT="${PWD}"
SESSION_DIR="${PROJECT_ROOT}/.claude"
SESSION_FILE="${SESSION_DIR}/session.json"

# Utility functions
log_info() {
  echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
  echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_error() {
  echo -e "${RED}[ERROR]${NC} $1"
}

# Check if gh CLI is available
check_gh_cli() {
  if ! command -v gh &>/dev/null; then
    log_error "GitHub CLI (gh) is not installed"
    echo "Install it from: https://cli.github.com/"
    exit 1
  fi

  # Check if authenticated
  if ! gh auth status &>/dev/null; then
    log_error "GitHub CLI is not authenticated"
    echo "Run: gh auth login"
    exit 1
  fi
}

# Get repository info
get_repo_info() {
  if [[ -d ".git" ]]; then
    local remote_url=$(git remote get-url origin 2>/dev/null || echo "")
    if [[ -n $remote_url ]]; then
      # Extract owner/repo from URL
      local repo_info=$(echo "$remote_url" | sed -E 's/.*[:/]([^/]+)\/([^/]+)(\.git)?$/\1\/\2/')
      echo "$repo_info"
    fi
  fi
  echo ""
}

# Link session to GitHub issues based on modified files
link_session_to_issues() {
  local session_id="${1:-}"

  if [[ ! -f $SESSION_FILE ]]; then
    log_error "No active session found"
    return 1
  fi

  check_gh_cli

  log_info "Linking session to GitHub issues..."

  # Get modified files from session
  local modified_files=$(jq -r '.files_modified[]' "$SESSION_FILE" 2>/dev/null)

  if [[ -z $modified_files ]]; then
    log_info "No modified files in session"
    return 0
  fi

  # Search for related open issues
  local linked_issues="[]"
  local issue_numbers=""

  # Get all open issues
  local open_issues=$(gh issue list --state open --json number,title,body --limit 100 2>/dev/null || echo "[]")

  # Search for issues mentioning modified files
  while IFS= read -r file; do
    local filename=$(basename "$file")
    local matched_issues=$(echo "$open_issues" | jq -r --arg file "$filename" \
      '.[] | select(.title + .body | test($file; "i")) | .number' 2>/dev/null || true)

    if [[ -n $matched_issues ]]; then
      issue_numbers="$issue_numbers $matched_issues"
    fi
  done <<<"$modified_files"

  # Remove duplicates
  issue_numbers=$(echo "$issue_numbers" | tr ' ' '\n' | sort -u | tr '\n' ' ')

  # Build linked issues array
  if [[ -n $issue_numbers ]]; then
    for issue_num in $issue_numbers; do
      local issue_data=$(gh issue view "$issue_num" --json number,title,state 2>/dev/null || continue)
      if [[ -n $issue_data ]]; then
        linked_issues=$(echo "$linked_issues" | jq --argjson issue "$issue_data" '. + [$issue]')
      fi
    done
  fi

  # Update session file with linked issues
  local temp_file="${SESSION_FILE}.tmp"
  jq --argjson issues "$linked_issues" '.github_issues = $issues' "$SESSION_FILE" >"$temp_file"
  mv "$temp_file" "$SESSION_FILE"

  local issue_count=$(echo "$linked_issues" | jq 'length')
  log_success "Linked $issue_count GitHub issues to session"
}

# Create session summary comment on issue
create_issue_comment() {
  local issue_number="$1"
  local session_id="${2:-}"

  if [[ ! -f $SESSION_FILE ]]; then
    log_error "No active session found"
    return 1
  fi

  check_gh_cli

  local session_data=$(cat "$SESSION_FILE")
  local activities=$(echo "$session_data" | jq -r '.activities[] | "- \(.timestamp): \(.description)"' 2>/dev/null | head -10)
  local files_modified=$(echo "$session_data" | jq -r '.files_modified[] | "- \(.)"' 2>/dev/null | head -10)

  local comment="## 🤖 Development Session Update

**Session ID**: $(echo "$session_data" | jq -r '.id')
**Started**: $(echo "$session_data" | jq -r '.started')

### 📝 Activities
${activities:-No activities recorded}

### 📁 Files Modified
${files_modified:-No files modified}

---
*This comment was generated by claude-init session tracking*"

  gh issue comment "$issue_number" --body "$comment"
  log_success "Added session summary to issue #$issue_number"
}

# Sync session with GitHub project board
sync_with_project() {
  local project_number="${1:-}"

  if [[ -z $project_number ]]; then
    log_error "No project number provided"
    return 1
  fi

  check_gh_cli

  log_info "Syncing session with GitHub project #$project_number..."

  # This is a placeholder for project board integration
  # GitHub's project v2 API requires more complex GraphQL queries
  log_info "Project board sync not yet implemented"
}

# Create automated PR description from session
generate_pr_description() {
  if [[ ! -f $SESSION_FILE ]]; then
    log_error "No active session found"
    return 1
  fi

  local session_data=$(cat "$SESSION_FILE")
  local session_id=$(echo "$session_data" | jq -r '.id')
  local activities=$(echo "$session_data" | jq -r '.activities[] | "- \(.description)"' 2>/dev/null)
  local files_count=$(echo "$session_data" | jq '.files_modified | length')
  local linked_issues=$(echo "$session_data" | jq -r '.github_issues[]?.number' 2>/dev/null | sed 's/^/#/' | tr '\n' ' ')

  cat <<EOF
## 📋 Summary

This PR includes changes from development session: \`$session_id\`

${linked_issues:+Fixes: $linked_issues}

## 🎯 Changes Made

$activities

## 📊 Impact

- Files modified: $files_count
- Session duration: Check session summary for details

## ✅ Checklist

- [ ] Code follows project style guidelines
- [ ] Tests have been added/updated
- [ ] Documentation has been updated
- [ ] Changes have been tested locally

---

*This PR description was generated from claude-init session tracking*
EOF
}

# Auto-detect and link issues from commit messages
link_commits_to_issues() {
  local since="${1:-1 hour ago}"

  check_gh_cli

  log_info "Scanning recent commits for issue references..."

  # Get recent commits
  local commits=$(git log --since="$since" --pretty=format:"%h %s" 2>/dev/null || echo "")

  if [[ -z $commits ]]; then
    log_info "No recent commits found"
    return 0
  fi

  # Extract issue numbers from commit messages
  local issue_numbers=$(echo "$commits" | grep -oE '#[0-9]+' | sed 's/#//' | sort -u)

  if [[ -z $issue_numbers ]]; then
    log_info "No issue references found in recent commits"
    return 0
  fi

  # Update session with found issues
  for issue_num in $issue_numbers; do
    log_issue_work "$issue_num" "" "committed"
  done

  log_success "Linked $(echo "$issue_numbers" | wc -w) issues from commit messages"
}

# Log issue work (shared with session-log.sh functionality)
log_issue_work() {
  local issue_number="$1"
  local issue_title="${2:-}"
  local action="${3:-worked}"

  if [[ ! -f $SESSION_FILE ]]; then
    return
  fi

  # Get issue details if title not provided
  if [[ -z $issue_title ]] && command -v gh &>/dev/null; then
    issue_title=$(gh issue view "$issue_number" --json title --jq '.title' 2>/dev/null || echo "Issue #$issue_number")
  fi

  # Create issue entry
  local issue_entry=$(
    cat <<EOF
{
    "number": $issue_number,
    "title": "$issue_title",
    "status": "$action"
}
EOF
  )

  # Update session file
  local temp_file="${SESSION_FILE}.tmp"
  local exists=$(jq --arg num "$issue_number" '.issues_worked[] | select(.number == ($num | tonumber))' "$SESSION_FILE" 2>/dev/null)

  if [[ -z $exists ]]; then
    # Add new issue
    jq --argjson issue "$issue_entry" '.issues_worked += [$issue]' "$SESSION_FILE" >"$temp_file"
  else
    # Update existing issue status
    jq --arg num "$issue_number" --arg status "$action" \
      '(.issues_worked[] | select(.number == ($num | tonumber)) | .status) = $status' \
      "$SESSION_FILE" >"$temp_file"
  fi

  mv "$temp_file" "$SESSION_FILE"
}

# Main command handling
case "${1:-}" in
"link-issues")
  link_session_to_issues
  ;;
"comment")
  shift
  issue_number="${1:-}"
  if [[ -z $issue_number ]]; then
    log_error "Usage: $0 comment <issue-number>"
    exit 1
  fi
  create_issue_comment "$issue_number"
  ;;
"pr-description")
  generate_pr_description
  ;;
"sync-project")
  shift
  project_number="${1:-}"
  sync_with_project "$project_number"
  ;;
"link-commits")
  shift
  since="${1:-1 hour ago}"
  link_commits_to_issues "$since"
  ;;
"--help" | "-h" | "")
  echo "Usage: $0 <command> [options]"
  echo ""
  echo "GitHub integration for claude-init session tracking."
  echo ""
  echo "Commands:"
  echo "  link-issues         Link session to related GitHub issues"
  echo "  comment <number>    Add session summary as issue comment"
  echo "  pr-description      Generate PR description from session"
  echo "  sync-project <num>  Sync with GitHub project board"
  echo "  link-commits [time] Link commits to issues (default: 1 hour)"
  echo ""
  echo "Examples:"
  echo "  $0 link-issues"
  echo "  $0 comment 42"
  echo "  $0 pr-description > pr-body.md"
  echo "  $0 link-commits \"1 day ago\""
  exit 0
  ;;
*)
  log_error "Unknown command: $1"
  echo "Run '$0 --help' for usage"
  exit 1
  ;;
esac

# Enhanced Makefile for Intelligent Project Management
# Part of claude-init - Adaptive to project type and language

# Project detection
PROJECT_TYPE := $(shell ./scripts/project-detector.sh . json 2>/dev/null | jq -r '.project_type // "unknown"' 2>/dev/null || echo "unknown")
PRIMARY_LANGUAGE := $(shell ./scripts/project-detector.sh . json 2>/dev/null | jq -r '.primary_language // "unknown"' 2>/dev/null || echo "unknown")
FRAMEWORKS := $(shell ./scripts/project-detector.sh . json 2>/dev/null | jq -r '.frameworks // ""' 2>/dev/null || echo "")

# Colors for output
BLUE := \033[0;34m
GREEN := \033[0;32m
YELLOW := \033[1;33m
RED := \033[0;31m
NC := \033[0m

# Default goal
.DEFAULT_GOAL := help

# Help target with auto-generated documentation
.PHONY: help
help: ## Show this help message with available commands
	@echo '$(BLUE)Enhanced Makefile - Intelligent Project Management$(NC)'
	@echo '================================================'
	@echo ''
	@echo '$(GREEN)Project Type:$(NC) $(PROJECT_TYPE)'
	@echo '$(GREEN)Primary Language:$(NC) $(PRIMARY_LANGUAGE)'
	@echo '$(GREEN)Frameworks:$(NC) $(FRAMEWORKS)'
	@echo ''
	@echo '$(YELLOW)Available Commands:$(NC)'
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / {printf "  $(BLUE)%-20s$(NC) %s\n", $$1, $$2}' $(MAKEFILE_LIST) | sort

# ========== Core Development Commands ==========

.PHONY: dev
dev: ## Start development server (auto-detected)
	@echo "$(BLUE)Starting development server for $(PROJECT_TYPE) project...$(NC)"
	@if [ "$(PROJECT_TYPE)" = "web-app" ]; then \
		if [ -f "package.json" ]; then \
			if grep -q '"dev"' package.json; then npm run dev; \
			elif grep -q '"start"' package.json; then npm start; \
			else echo "No dev script found"; fi; \
		fi; \
	elif [ "$(PROJECT_TYPE)" = "api" ]; then \
		if [ -f "manage.py" ]; then python manage.py runserver; \
		elif [ -f "app.py" ]; then python app.py; \
		elif [ -f "main.go" ]; then go run main.go; \
		elif [ -f "package.json" ]; then npm run dev; \
		else echo "No dev server configuration found"; fi; \
	else \
		echo "Project type $(PROJECT_TYPE) - no default dev server"; \
	fi

.PHONY: build
build: ## Build project (language-specific)
	@echo "$(BLUE)Building $(PRIMARY_LANGUAGE) project...$(NC)"
	@if [ "$(PRIMARY_LANGUAGE)" = "javascript" ] || [ "$(PRIMARY_LANGUAGE)" = "typescript" ]; then \
		npm run build 2>/dev/null || echo "No build script configured"; \
	elif [ "$(PRIMARY_LANGUAGE)" = "python" ]; then \
		if [ -f "setup.py" ]; then python setup.py build; \
		else echo "No Python build configuration"; fi; \
	elif [ "$(PRIMARY_LANGUAGE)" = "go" ]; then \
		go build ./...; \
	elif [ "$(PRIMARY_LANGUAGE)" = "rust" ]; then \
		cargo build --release; \
	else \
		echo "No build configuration for $(PRIMARY_LANGUAGE)"; \
	fi

.PHONY: test
test: ## Run tests (framework-aware)
	@echo "$(BLUE)Running tests...$(NC)"
	@if [ -f "package.json" ] && grep -q '"test"' package.json; then \
		npm test; \
	elif [ -f "pytest.ini" ] || [ -d "tests" ]; then \
		pytest; \
	elif [ -f "go.mod" ]; then \
		go test ./...; \
	elif [ -f "Cargo.toml" ]; then \
		cargo test; \
	else \
		echo "No test configuration found"; \
	fi

.PHONY: lint
lint: ## Run linters (language-specific)
	@echo "$(BLUE)Running linters for $(PRIMARY_LANGUAGE)...$(NC)"
	@if [ "$(PRIMARY_LANGUAGE)" = "javascript" ] || [ "$(PRIMARY_LANGUAGE)" = "typescript" ]; then \
		npx eslint . 2>/dev/null || echo "ESLint not configured"; \
	elif [ "$(PRIMARY_LANGUAGE)" = "python" ]; then \
		flake8 . 2>/dev/null || echo "Flake8 not installed"; \
		mypy . 2>/dev/null || echo "Mypy not installed"; \
	elif [ "$(PRIMARY_LANGUAGE)" = "go" ]; then \
		golint ./... 2>/dev/null || echo "Golint not installed"; \
	elif [ "$(PRIMARY_LANGUAGE)" = "rust" ]; then \
		cargo clippy 2>/dev/null || echo "Clippy not available"; \
	fi

.PHONY: format
format: ## Format code (language-specific)
	@echo "$(BLUE)Formatting code...$(NC)"
	@if [ "$(PRIMARY_LANGUAGE)" = "javascript" ] || [ "$(PRIMARY_LANGUAGE)" = "typescript" ]; then \
		npx prettier --write . 2>/dev/null || echo "Prettier not configured"; \
	elif [ "$(PRIMARY_LANGUAGE)" = "python" ]; then \
		black . 2>/dev/null || echo "Black not installed"; \
		isort . 2>/dev/null || echo "isort not installed"; \
	elif [ "$(PRIMARY_LANGUAGE)" = "go" ]; then \
		go fmt ./...; \
	elif [ "$(PRIMARY_LANGUAGE)" = "rust" ]; then \
		cargo fmt; \
	fi

# ========== Shell Script Quality ==========

.PHONY: fix-shell
fix-shell: ## Comprehensive shell script fixing (shellharden + shfmt + shellcheck)
	@echo "$(BLUE)Fixing shell script issues...$(NC)"
	@if command -v shellharden >/dev/null 2>&1; then \
		echo "$(YELLOW)Applying security fixes with shellharden...$(NC)"; \
		find . -type f -name "*.sh" -not -path "./node_modules/*" -not -path "./.git/*" | xargs -I {} shellharden --transform {} 2>/dev/null || true; \
	else \
		echo "$(YELLOW)shellharden not found. Install with: cargo install shellharden$(NC)"; \
	fi
	@if command -v shfmt >/dev/null 2>&1; then \
		echo "$(YELLOW)Formatting shell scripts with shfmt...$(NC)"; \
		find . -type f -name "*.sh" -not -path "./node_modules/*" -not -path "./.git/*" | xargs shfmt -w -i 2 -ci -s 2>/dev/null || true; \
	else \
		echo "$(YELLOW)shfmt not found. Install with: brew install shfmt$(NC)"; \
	fi
	@echo "$(GREEN)âœ… Shell script fixes applied!$(NC)"

.PHONY: lint-shell
lint-shell: ## Lint shell scripts with shellcheck
	@echo "$(BLUE)Linting shell scripts...$(NC)"
	@if command -v shellcheck >/dev/null 2>&1; then \
		find . -type f -name "*.sh" -not -path "./node_modules/*" -not -path "./.git/*" | xargs shellcheck; \
	else \
		echo "$(YELLOW)shellcheck not found. Install with: brew install shellcheck$(NC)"; \
	fi

.PHONY: format-shell
format-shell: ## Format shell scripts with shfmt
	@echo "$(BLUE)Formatting shell scripts...$(NC)"
	@if command -v shfmt >/dev/null 2>&1; then \
		find . -type f -name "*.sh" -not -path "./node_modules/*" -not -path "./.git/*" | xargs shfmt -w -i 2 -ci -s; \
	else \
		echo "$(YELLOW)shfmt not found. Install with: brew install shfmt$(NC)"; \
	fi

.PHONY: shell-toolchain
shell-toolchain: ## Install shell script toolchain (cross-platform)
	@echo "$(BLUE)Installing shell script toolchain...$(NC)"
	@if [ -x "./scripts/install-shell-tools.sh" ]; then \
		./scripts/install-shell-tools.sh; \
	else \
		echo "$(YELLOW)Cross-platform installer not found. Installing via platform defaults...$(NC)"; \
		if command -v brew >/dev/null 2>&1; then \
			brew install shellcheck shfmt; \
			cargo install shellharden 2>/dev/null || echo "$(YELLOW)Install Rust for shellharden: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh$(NC)"; \
		elif command -v apt-get >/dev/null 2>&1; then \
			sudo apt-get update && sudo apt-get install -y shellcheck; \
			echo "$(YELLOW)For shfmt and shellharden, run: ./scripts/install-shell-tools.sh$(NC)"; \
		elif command -v nix-env >/dev/null 2>&1; then \
			nix-env -iA nixpkgs.shellcheck nixpkgs.shfmt; \
			cargo install shellharden 2>/dev/null || echo "$(YELLOW)Install Rust for shellharden$(NC)"; \
		else \
			echo "$(RED)No supported package manager found. Please install tools manually:$(NC)"; \
			echo "  - shellcheck: https://github.com/koalaman/shellcheck#installing"; \
			echo "  - shfmt: https://github.com/mvdan/sh#shfmt"; \
			echo "  - shellharden: cargo install shellharden"; \
		fi; \
	fi

# ========== Intelligence Commands ==========

.PHONY: analyze
analyze: ## Run comprehensive project analysis
	@echo "$(BLUE)Running project analysis...$(NC)"
	@./scripts/project-detector.sh . human

.PHONY: detect
detect: ## Detect project characteristics
	@echo "$(BLUE)Detecting project characteristics...$(NC)"
	@./scripts/project-detector.sh . json | jq '.'

.PHONY: health
health: ## Run full health assessment
	@echo "$(BLUE)Running comprehensive health assessment...$(NC)"
	@if [ -x "./scripts/health-assessment/core-health.sh" ]; then \
		./scripts/health-assessment/core-health.sh . human; \
	else \
		./scripts/project-detector.sh . human | grep -E "Maturity Score|Health Status" || echo "Health assessment not available"; \
	fi
	@if [ -f ".claude/session.json" ]; then \
		./scripts/session/session-log.sh "Ran health assessment" "analysis"; \
	fi

.PHONY: health-quick
health-quick: ## Quick health check
	@echo "$(BLUE)Running quick health check...$(NC)"
	@./scripts/project-detector.sh . human | grep -E "Maturity Score|Health Status" || echo "Quick check not available"

.PHONY: health-lang
health-lang: ## Language-specific health check
	@echo "$(BLUE)Running language-specific health check...$(NC)"
	@if [ -x "./scripts/health-assessment/languages/$(PRIMARY_LANGUAGE).sh" ]; then \
		./scripts/health-assessment/languages/$(PRIMARY_LANGUAGE).sh . human; \
	else \
		echo "No health check available for $(PRIMARY_LANGUAGE)"; \
	fi

.PHONY: health-security
health-security: ## Security-focused health check
	@echo "$(BLUE)Running security assessment...$(NC)"
	@if [ -x "./scripts/health-assessment/security-scanner.sh" ]; then \
		./scripts/health-assessment/security-scanner.sh . human; \
	else \
		make security; \
	fi

.PHONY: health-performance
health-performance: ## Performance-focused health check
	@echo "$(BLUE)Running performance assessment...$(NC)"
	@if [ -x "./scripts/health-assessment/performance-analyzer.sh" ]; then \
		./scripts/health-assessment/performance-analyzer.sh . human; \
	else \
		echo "Performance assessment not available"; \
	fi

.PHONY: health-report
health-report: ## Generate comprehensive health report
	@echo "$(BLUE)Generating health report...$(NC)"
	@mkdir -p reports
	@if [ -x "./scripts/health-assessment/core-health.sh" ]; then \
		./scripts/health-assessment/core-health.sh . json > reports/health-report-$$(date +%Y%m%d-%H%M%S).json && \
		echo "$(GREEN)Report saved to reports/$(NC)"; \
	else \
		echo "Health assessment not available"; \
	fi

.PHONY: security
security: ## Run security assessment
	@echo "$(BLUE)Running security assessment...$(NC)"
	@if [ "$(PRIMARY_LANGUAGE)" = "javascript" ] || [ "$(PRIMARY_LANGUAGE)" = "typescript" ]; then \
		npm audit --production 2>/dev/null || echo "npm audit not available"; \
	elif [ "$(PRIMARY_LANGUAGE)" = "python" ]; then \
		safety check 2>/dev/null || echo "Safety not installed"; \
		bandit -r . 2>/dev/null || echo "Bandit not installed"; \
	elif [ "$(PRIMARY_LANGUAGE)" = "go" ]; then \
		gosec ./... 2>/dev/null || echo "Gosec not installed"; \
	elif [ "$(PRIMARY_LANGUAGE)" = "rust" ]; then \
		cargo audit 2>/dev/null || echo "Cargo audit not installed"; \
	fi

.PHONY: optimize
optimize: ## Find optimization opportunities
	@echo "$(BLUE)Finding optimization opportunities...$(NC)"
	@echo "$(YELLOW)Code Quality:$(NC)"
	@make lint 2>/dev/null || true
	@echo ""
	@echo "$(YELLOW)Bundle Size (if applicable):$(NC)"
	@if [ -f "package.json" ]; then \
		npx size-limit 2>/dev/null || echo "Size analysis not configured"; \
	fi
	@echo ""
	@echo "$(YELLOW)Dependencies:$(NC)"
	@make deps-check

# ========== Enhanced Session Management ==========

.PHONY: session-start
session-start: ## Start tracked development session
	@./scripts/session/session-start.sh

.PHONY: session-status
session-status: ## Show current session status
	@./scripts/session/session-status.sh

.PHONY: session-end
session-end: ## End session with summary
	@./scripts/session/session-end.sh

.PHONY: session-log
session-log: ## Log activity (usage: make session-log MSG="message")
	@if [ -z "$(MSG)" ]; then echo "Usage: make session-log MSG=\"your message\""; exit 1; fi
	@./scripts/session/session-log.sh "$(MSG)"

.PHONY: session-health
session-health: health ## Update session with health check

# ========== Claude Code Workflows ==========

.PHONY: epcc
epcc: ## Start Explore-Plan-Code-Commit workflow
	@echo "$(BLUE)Starting EPCC Workflow (Explore â†’ Plan â†’ Code â†’ Commit)$(NC)"
	@echo ""
	@echo "$(YELLOW)1. EXPLORE Phase:$(NC)"
	@echo "   - Read relevant files to understand the codebase"
	@echo "   - Identify existing patterns and conventions"
	@echo "   - Check for related functionality"
	@echo ""
	@echo "$(YELLOW)2. PLAN Phase:$(NC)"
	@echo "   - Create a detailed implementation plan"
	@echo "   - Break down into logical steps"
	@echo "   - Consider edge cases and testing"
	@echo ""
	@echo "$(YELLOW)3. CODE Phase:$(NC)"
	@echo "   - Implement one step at a time"
	@echo "   - Test each component before proceeding"
	@echo "   - Follow project conventions"
	@echo ""
	@echo "$(YELLOW)4. COMMIT Phase:$(NC)"
	@echo "   - Review all changes: git diff"
	@echo "   - Run tests: make test"
	@echo "   - Create atomic commits with clear messages"
	@echo ""
	@echo "$(GREEN)See templates/workflows/epcc-workflow.md for detailed guide$(NC)"

.PHONY: tdd
tdd: ## Start Test-Driven Development workflow
	@echo "$(BLUE)Starting TDD Workflow (Red â†’ Green â†’ Refactor)$(NC)"
	@echo ""
	@echo "$(RED)1. RED Phase - Write Failing Tests:$(NC)"
	@echo "   - Define expected behavior through tests"
	@echo "   - Cover edge cases and error conditions"
	@echo "   - Run tests to confirm they fail"
	@echo ""
	@echo "$(GREEN)2. GREEN Phase - Make Tests Pass:$(NC)"
	@echo "   - Write minimal code to pass tests"
	@echo "   - Don't add unnecessary features"
	@echo "   - Run tests frequently"
	@echo ""
	@echo "$(BLUE)3. REFACTOR Phase - Improve Code:$(NC)"
	@echo "   - Clean up implementation"
	@echo "   - Remove duplication"
	@echo "   - Ensure tests still pass"
	@echo ""
	@echo "$(GREEN)See templates/workflows/tdd-workflow.md for detailed guide$(NC)"

.PHONY: visual
visual: ## Start Visual Iteration workflow for UI development
	@echo "$(BLUE)Starting Visual Iteration Workflow$(NC)"
	@echo ""
	@echo "$(YELLOW)1. Provide Visual Reference:$(NC)"
	@echo "   - Share screenshot or mockup"
	@echo "   - Include design specifications"
	@echo "   - Note specific requirements"
	@echo ""
	@echo "$(YELLOW)2. Initial Implementation:$(NC)"
	@echo "   - Create first version matching design"
	@echo "   - Focus on structure and layout"
	@echo ""
	@echo "$(YELLOW)3. Screenshot & Compare:$(NC)"
	@echo "   - Take screenshot of current state"
	@echo "   - Compare with original design"
	@echo "   - Identify differences"
	@echo ""
	@echo "$(YELLOW)4. Iterate & Refine:$(NC)"
	@echo "   - Adjust based on feedback"
	@echo "   - Fine-tune spacing, colors, interactions"
	@echo "   - Repeat until pixel-perfect"
	@echo ""
	@echo "$(GREEN)See templates/workflows/visual-iteration-workflow.md for detailed guide$(NC)"

# ========== Git Workflow (Enhanced) ==========

.PHONY: status
status: ## Show git status (multi-repo aware)
	@echo "$(BLUE)Repository Status:$(NC)"
	@if [ -d ".git" ]; then \
		git status -sb; \
	else \
		echo "Not a git repository"; \
	fi
	@if [ -f ".gitmodules" ]; then \
		echo ""; \
		echo "$(YELLOW)Submodule Status:$(NC)"; \
		git submodule status; \
	fi

.PHONY: branches
branches: ## Show branch information
	@git branch -vv

.PHONY: cleanup
cleanup: ## Clean up merged branches
	@echo "$(BLUE)Cleaning up merged branches...$(NC)"
	@git branch --merged | grep -v "\*" | grep -v main | grep -v master | xargs -n 1 git branch -d 2>/dev/null || echo "No branches to clean"

.PHONY: issue
issue: ## Create GitHub issue
	@gh issue create

.PHONY: pr
pr: ## Create PR with session context
	@if [ -f ".claude/session.json" ]; then \
		./scripts/github-integration.sh pr-description > .pr-description.tmp && \
		gh pr create --body-file .pr-description.tmp && \
		rm -f .pr-description.tmp; \
	else \
		gh pr create; \
	fi

# ========== Dependency Management ==========

.PHONY: deps-update
deps-update: ## Update dependencies
	@echo "$(BLUE)Updating dependencies...$(NC)"
	@if [ -f "package.json" ]; then \
		npm update; \
		npm audit fix; \
	elif [ -f "requirements.txt" ]; then \
		pip install --upgrade -r requirements.txt; \
	elif [ -f "go.mod" ]; then \
		go get -u ./...; \
		go mod tidy; \
	elif [ -f "Cargo.toml" ]; then \
		cargo update; \
	fi

.PHONY: deps-check
deps-check: ## Check dependency health
	@echo "$(BLUE)Checking dependencies...$(NC)"
	@if [ -f "package.json" ]; then \
		npm outdated || true; \
		echo ""; \
		npm audit || true; \
	elif [ -f "requirements.txt" ]; then \
		pip list --outdated || true; \
	elif [ -f "go.mod" ]; then \
		go list -u -m all || true; \
	fi

.PHONY: deps-clean
deps-clean: ## Clean dependency caches
	@echo "$(BLUE)Cleaning dependency caches...$(NC)"
	@if [ -d "node_modules" ]; then \
		rm -rf node_modules package-lock.json; \
		echo "Removed node_modules"; \
	fi
	@if [ -d "__pycache__" ]; then \
		find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true; \
		echo "Removed Python caches"; \
	fi

# ========== Documentation ==========

.PHONY: docs
docs: ## Generate documentation
	@echo "$(BLUE)Generating documentation...$(NC)"
	@if [ -f "package.json" ] && grep -q '"docs"' package.json; then \
		npm run docs; \
	elif [ -f "docs/conf.py" ]; then \
		cd docs && make html; \
	elif [ -f "mkdocs.yml" ]; then \
		mkdocs build; \
	else \
		echo "No documentation configuration found"; \
	fi

.PHONY: docs-serve
docs-serve: ## Serve documentation locally
	@echo "$(BLUE)Serving documentation...$(NC)"
	@if [ -f "mkdocs.yml" ]; then \
		mkdocs serve; \
	elif [ -d "docs/_build" ]; then \
		cd docs/_build/html && python -m http.server; \
	else \
		echo "No documentation to serve"; \
	fi

# ========== Maintenance ==========

.PHONY: clean
clean: ## Clean build artifacts
	@echo "$(BLUE)Cleaning build artifacts...$(NC)"
	@find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
	@find . -type f -name "*.pyc" -delete 2>/dev/null || true
	@find . -type d -name ".pytest_cache" -exec rm -rf {} + 2>/dev/null || true
	@find . -type d -name "*.egg-info" -exec rm -rf {} + 2>/dev/null || true
	@find . -type d -name "dist" -not -path "./node_modules/*" -exec rm -rf {} + 2>/dev/null || true
	@find . -type d -name "build" -not -path "./node_modules/*" -exec rm -rf {} + 2>/dev/null || true
	@find . -type f -name ".coverage" -delete 2>/dev/null || true
	@rm -rf htmlcov/ 2>/dev/null || true
	@rm -rf target/ 2>/dev/null || true
	@echo "$(GREEN)Clean complete!$(NC)"

.PHONY: setup
setup: ## Set up development environment
	@echo "$(BLUE)Setting up development environment...$(NC)"
	@./scripts/setup-analyzer.sh

.PHONY: fresh
fresh: clean deps-clean ## Fresh start - clean everything and reinstall
	@echo "$(BLUE)Fresh start...$(NC)"
	@make setup
	@make deps-update

# ========== Framework-Specific Commands ==========

# React/Next.js specific
ifeq ($(findstring react,$(FRAMEWORKS)),react)
.PHONY: dev-react
dev-react: ## Start React development server
	@npm run dev || npm start

.PHONY: build-react
build-react: ## Build React application
	@npm run build

.PHONY: preview
preview: ## Preview production build
	@npx serve build || npx serve dist
endif

# API specific
ifeq ($(PROJECT_TYPE),api)
.PHONY: dev-api
dev-api: ## Start API development server
	@make dev

.PHONY: test-api
test-api: ## Run API integration tests
	@echo "Running API tests..."
	@make test

.PHONY: db-migrate
db-migrate: ## Run database migrations
	@if [ -f "manage.py" ]; then \
		python manage.py migrate; \
	elif [ -f "alembic.ini" ]; then \
		alembic upgrade head; \
	else \
		echo "No migration configuration found"; \
	fi
endif

# ========== Advanced Features ==========

.PHONY: ci
ci: lint test security ## Run CI checks locally
	@echo "$(GREEN)All CI checks passed!$(NC)"

.PHONY: pre-commit
pre-commit: format lint ## Pre-commit checks
	@echo "$(GREEN)Pre-commit checks passed!$(NC)"

.PHONY: release
release: ## Prepare release
	@echo "$(BLUE)Preparing release...$(NC)"
	@if [ -f "package.json" ]; then \
		npm version patch; \
	elif [ -f "setup.py" ]; then \
		bumpversion patch; \
	else \
		echo "No release configuration"; \
	fi

.PHONY: monitor
monitor: ## Monitor file changes
	@echo "$(BLUE)Monitoring file changes...$(NC)"
	@if command -v watchexec >/dev/null; then \
		watchexec -e py,js,ts,go,rs make test; \
	else \
		echo "Install watchexec for file monitoring"; \
	fi

# ========== Reporting ==========

.PHONY: report
report: ## Generate project report
	@echo "$(BLUE)Project Report$(NC)"
	@echo "=============="
	@echo ""
	@make detect 2>/dev/null | jq -r 'to_entries | .[] | "\(.key): \(.value)"' || true
	@echo ""
	@echo "$(YELLOW)Code Statistics:$(NC)"
	@if command -v tokei >/dev/null; then \
		tokei; \
	elif command -v cloc >/dev/null; then \
		cloc . --exclude-dir=node_modules,venv,.git; \
	else \
		find . -name "*.$(PRIMARY_LANGUAGE)" | wc -l | xargs echo "Source files:"; \
	fi

.PHONY: todo
todo: ## Find TODO/FIXME items
	@echo "$(BLUE)TODO items in codebase:$(NC)"
	@rg "TODO|FIXME|HACK|XXX" --type-not md || grep -r "TODO\|FIXME" . --exclude-dir=node_modules --exclude-dir=.git || echo "No TODOs found"

# ========== Help Aliases ==========

.PHONY: h
h: help ## Alias for help

.PHONY: s
s: status ## Alias for status

.PHONY: d
d: dev ## Alias for dev

.PHONY: t
t: test ## Alias for test

.PHONY: b
b: build ## Alias for build
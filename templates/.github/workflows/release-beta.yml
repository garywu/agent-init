name: Beta Release

on:
  schedule:
    # Every Monday at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: false
        default: 'auto'
        type: choice
        options:
          - auto
          - patch
          - minor
          - major

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  beta-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: main

      - name: Configure Git
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

      - name: Fetch all branches and tags
        run: |
          git fetch --all --tags
          git checkout -B beta origin/beta || git checkout -b beta

      - name: Merge main into beta
        run: |
          git merge origin/main --no-edit || {
            echo "Merge conflicts detected. Manual intervention required."
            exit 1
          }

      - name: Determine version bump
        id: version
        run: |
          # Get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          LATEST_STABLE=${LATEST_TAG%-beta.*}
          
          # Extract version parts
          VERSION=${LATEST_STABLE#v}
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
          
          # Determine version bump type
          if [[ "${{ inputs.version_type }}" == "auto" ]]; then
            # Analyze commits since last tag
            COMMITS=$(git log ${LATEST_TAG}..HEAD --pretty=format:"%s")
            
            if echo "$COMMITS" | grep -qE "^(feat!|fix!|BREAKING CHANGE)"; then
              BUMP_TYPE="major"
            elif echo "$COMMITS" | grep -q "^feat"; then
              BUMP_TYPE="minor"
            else
              BUMP_TYPE="patch"
            fi
          else
            BUMP_TYPE="${{ inputs.version_type }}"
          fi
          
          # Calculate new version
          case $BUMP_TYPE in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            patch)
              PATCH=$((PATCH + 1))
              ;;
          esac
          
          NEW_VERSION="v${MAJOR}.${MINOR}.${PATCH}"
          
          # Find next beta number
          BETA_NUM=1
          while git tag -l "${NEW_VERSION}-beta.${BETA_NUM}" | grep -q .; do
            BETA_NUM=$((BETA_NUM + 1))
          done
          
          BETA_VERSION="${NEW_VERSION}-beta.${BETA_NUM}"
          
          echo "version=${BETA_VERSION}" >> $GITHUB_OUTPUT
          echo "bump_type=${BUMP_TYPE}" >> $GITHUB_OUTPUT
          echo "Beta version: ${BETA_VERSION} (${BUMP_TYPE} bump)"

      - name: Generate release notes
        id: notes
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [[ -z "$LATEST_TAG" ]]; then
            RANGE="HEAD"
          else
            RANGE="${LATEST_TAG}..HEAD"
          fi
          
          # Generate release notes
          cat > RELEASE_NOTES.md << EOF
          ## Beta Release ${{ steps.version.outputs.version }}
          
          ### Changes since last release
          
          EOF
          
          # Categorize commits
          echo "#### 🚀 Features" >> RELEASE_NOTES.md
          git log $RANGE --grep="^feat" --pretty=format:"- %s (%h)" >> RELEASE_NOTES.md || echo "- No features" >> RELEASE_NOTES.md
          
          echo -e "\n\n#### 🐛 Bug Fixes" >> RELEASE_NOTES.md
          git log $RANGE --grep="^fix" --pretty=format:"- %s (%h)" >> RELEASE_NOTES.md || echo "- No fixes" >> RELEASE_NOTES.md
          
          echo -e "\n\n#### 📚 Documentation" >> RELEASE_NOTES.md
          git log $RANGE --grep="^docs" --pretty=format:"- %s (%h)" >> RELEASE_NOTES.md || echo "- No documentation changes" >> RELEASE_NOTES.md
          
          echo -e "\n\n#### 🔧 Other Changes" >> RELEASE_NOTES.md
          git log $RANGE --not --grep="^feat" --not --grep="^fix" --not --grep="^docs" --pretty=format:"- %s (%h)" >> RELEASE_NOTES.md || echo "- No other changes" >> RELEASE_NOTES.md
          
          # Add testing notes
          cat >> RELEASE_NOTES.md << EOF
          
          ### Testing
          
          This is a beta release. Please test thoroughly before using in production.
          
          To use this beta version:
          \`\`\`bash
          git submodule add -b beta https://github.com/${{ github.repository }}.git
          \`\`\`
          
          Report any issues at: https://github.com/${{ github.repository }}/issues
          EOF

      - name: Update VERSION file
        run: |
          echo "${{ steps.version.outputs.version }}" > VERSION
          git add VERSION
          git commit -m "chore(release): ${{ steps.version.outputs.version }}" || echo "No changes to commit"

      - name: Push to beta branch
        run: |
          git push origin beta

      - name: Create beta tag
        run: |
          git tag -a "${{ steps.version.outputs.version }}" -m "Beta release ${{ steps.version.outputs.version }}"
          git push origin "${{ steps.version.outputs.version }}"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: ${{ steps.version.outputs.version }}
          body_path: RELEASE_NOTES.md
          prerelease: true
          target_commitish: beta

      - name: Create tracking issue
        uses: actions/github-script@v7
        with:
          script: |
            const version = '${{ steps.version.outputs.version }}';
            const bumpType = '${{ steps.version.outputs.bump_type }}';
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Beta Release ${version} Published`,
              body: `A new beta release has been published!
              
              **Version**: ${version}
              **Type**: ${bumpType} version bump
              **Branch**: beta
              **Date**: ${new Date().toISOString()}
              
              [View Release](https://github.com/${context.repo.owner}/${context.repo.repo}/releases/tag/${version})
              
              ## Next Steps
              - [ ] Test beta release thoroughly
              - [ ] Gather feedback from early adopters
              - [ ] Fix any critical issues
              - [ ] Prepare for stable release promotion
              
              ## Testing Checklist
              - [ ] Installation works correctly
              - [ ] All templates function properly
              - [ ] No breaking changes for existing users
              - [ ] Documentation is accurate
              `,
              labels: ['beta-release', 'testing']
            });
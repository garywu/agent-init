name: Project Intelligence Analysis

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run weekly analysis on Sunday at 6 AM UTC
    - cron: '0 6 * * 0'
  workflow_dispatch:
    inputs:
      analysis_type:
        description: 'Type of analysis to run'
        required: true
        default: 'standard'
        type: choice
        options:
          - quick
          - standard
          - comprehensive

jobs:
  project-analysis:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      pull-requests: write
      issues: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for comprehensive analysis

      - name: Setup Node.js (if applicable)
        uses: actions/setup-node@v4
        if: ${{ hashFiles('package.json') != '' }}
        with:
          node-version: '18'
          cache: 'npm'

      - name: Setup Python (if applicable)
        uses: actions/setup-python@v4
        if: ${{ hashFiles('requirements.txt', 'pyproject.toml') != '' }}
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Setup Go (if applicable)
        uses: actions/setup-go@v4
        if: ${{ hashFiles('go.mod') != '' }}
        with:
          go-version: '1.21'
          cache: true

      - name: Make scripts executable
        run: |
          find scripts -name "*.sh" -type f -exec chmod +x {} \;
        continue-on-error: true

      - name: Run Project Detection
        id: project-detection
        run: |
          if [ -f "scripts/project-detector.sh" ]; then
            echo "Running project detection..."
            ./scripts/project-detector.sh . json > project-analysis.json

            # Extract key metrics for GitHub outputs
            PROJECT_TYPE=$(jq -r '.project_type // "unknown"' project-analysis.json)
            PRIMARY_LANG=$(jq -r '.primary_language // "unknown"' project-analysis.json)
            FRAMEWORKS=$(jq -r '.frameworks // "none"' project-analysis.json)
            MATURITY_SCORE=$(jq -r '.maturity_score // "0"' project-analysis.json)

            echo "project_type=$PROJECT_TYPE" >> $GITHUB_OUTPUT
            echo "primary_language=$PRIMARY_LANG" >> $GITHUB_OUTPUT
            echo "frameworks=$FRAMEWORKS" >> $GITHUB_OUTPUT
            echo "maturity_score=$MATURITY_SCORE" >> $GITHUB_OUTPUT

            # Generate human-readable analysis
            ./scripts/project-detector.sh . human > project-analysis-human.txt
          else
            echo "Project detector script not found. This repository may not be claude-init enhanced."
            echo "project_type=unknown" >> $GITHUB_OUTPUT
            echo "primary_language=unknown" >> $GITHUB_OUTPUT
            echo "frameworks=none" >> $GITHUB_OUTPUT
            echo "maturity_score=0" >> $GITHUB_OUTPUT
          fi

      - name: Install Dependencies (Node.js)
        if: ${{ hashFiles('package.json') != '' && steps.project-detection.outputs.primary_language == 'javascript' }}
        run: npm ci
        continue-on-error: true

      - name: Install Dependencies (Python)
        if: ${{ hashFiles('requirements.txt') != '' && steps.project-detection.outputs.primary_language == 'python' }}
        run: pip install -r requirements.txt
        continue-on-error: true

      - name: Run Language-Specific Analysis
        id: lang-analysis
        run: |
          case "${{ steps.project-detection.outputs.primary_language }}" in
            "javascript"|"typescript")
              echo "Running JavaScript/TypeScript analysis..."

              # Check for package.json issues
              if [ -f "package.json" ]; then
                # Basic package.json validation
                jq empty package.json && echo "✅ package.json is valid JSON" || echo "❌ package.json has syntax errors"

                # Check for security vulnerabilities
                if command -v npm &> /dev/null; then
                  npm audit --audit-level=high --json > npm-audit.json 2>/dev/null || true
                  VULNERABILITY_COUNT=$(jq '.metadata.vulnerabilities.total // 0' npm-audit.json 2>/dev/null || echo "0")
                  echo "vulnerability_count=$VULNERABILITY_COUNT" >> $GITHUB_OUTPUT
                fi

                # Bundle size analysis (if applicable)
                if [ -f "webpack.config.js" ] || [ -f "vite.config.js" ] || [ -f "vite.config.ts" ]; then
                  echo "Bundle configuration detected"
                fi
              fi
              ;;

            "python")
              echo "Running Python analysis..."

              # Check requirements.txt
              if [ -f "requirements.txt" ]; then
                echo "✅ requirements.txt found"
                # Basic security check with safety (if available)
                if command -v safety &> /dev/null; then
                  safety check --json > safety-report.json 2>/dev/null || true
                fi
              fi

              # Check for common Python files
              [ -f "setup.py" ] && echo "✅ setup.py found"
              [ -f "pyproject.toml" ] && echo "✅ pyproject.toml found"
              ;;

            "go")
              echo "Running Go analysis..."

              # Go module analysis
              if [ -f "go.mod" ]; then
                echo "✅ go.mod found"
                go list -m all > go-modules.txt 2>/dev/null || true

                # Security check
                if command -v gosec &> /dev/null; then
                  gosec ./... 2>/dev/null || true
                fi
              fi
              ;;

            *)
              echo "No specific analysis available for ${{ steps.project-detection.outputs.primary_language }}"
              ;;
          esac

      - name: Generate Health Score
        id: health-score
        run: |
          HEALTH_SCORE=100

          # Deduct points for missing files
          [ ! -f "README.md" ] && HEALTH_SCORE=$((HEALTH_SCORE - 15))
          [ ! -f "LICENSE" ] && HEALTH_SCORE=$((HEALTH_SCORE - 10))
          [ ! -f ".gitignore" ] && HEALTH_SCORE=$((HEALTH_SCORE - 10))
          [ ! -f "CONTRIBUTING.md" ] && HEALTH_SCORE=$((HEALTH_SCORE - 5))

          # Deduct for security issues
          VULN_COUNT="${{ steps.lang-analysis.outputs.vulnerability_count || 0 }}"
          if [ "$VULN_COUNT" -gt 0 ]; then
            HEALTH_SCORE=$((HEALTH_SCORE - VULN_COUNT * 2))
          fi

          # Ensure score doesn't go below 0
          [ $HEALTH_SCORE -lt 0 ] && HEALTH_SCORE=0

          echo "health_score=$HEALTH_SCORE" >> $GITHUB_OUTPUT

          # Determine health status
          if [ $HEALTH_SCORE -ge 80 ]; then
            echo "health_status=Healthy" >> $GITHUB_OUTPUT
            echo "health_emoji=🟢" >> $GITHUB_OUTPUT
          elif [ $HEALTH_SCORE -ge 60 ]; then
            echo "health_status=Warning" >> $GITHUB_OUTPUT
            echo "health_emoji=🟡" >> $GITHUB_OUTPUT
          else
            echo "health_status=Critical" >> $GITHUB_OUTPUT
            echo "health_emoji=🔴" >> $GITHUB_OUTPUT
          fi

      - name: Generate Analysis Report
        run: |
          cat > analysis-report.md <<EOF
          # 🔍 Project Intelligence Analysis Report

          **Generated**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          **Trigger**: ${{ github.event_name }}
          **Branch**: ${{ github.ref_name }}

          ## 📊 Project Overview

          | Metric | Value |
          |--------|-------|
          | **Project Type** | ${{ steps.project-detection.outputs.project_type }} |
          | **Primary Language** | ${{ steps.project-detection.outputs.primary_language }} |
          | **Frameworks** | ${{ steps.project-detection.outputs.frameworks }} |
          | **Maturity Score** | ${{ steps.project-detection.outputs.maturity_score }}/100 |
          | **Health Score** | ${{ steps.health-score.outputs.health_score }}/100 |
          | **Health Status** | ${{ steps.health-score.outputs.health_emoji }} ${{ steps.health-score.outputs.health_status }} |

          ## 🎯 Recommendations

          Based on the analysis, here are the top recommendations:

          EOF

          # Add specific recommendations based on health score
          HEALTH_SCORE=${{ steps.health-score.outputs.health_score }}

          if [ $HEALTH_SCORE -lt 80 ]; then
            echo "### 🚨 High Priority" >> analysis-report.md
            [ ! -f "README.md" ] && echo "- Add comprehensive README.md documentation" >> analysis-report.md
            [ ! -f "LICENSE" ] && echo "- Add LICENSE file for legal clarity" >> analysis-report.md
            [ ! -f ".gitignore" ] && echo "- Add .gitignore to exclude unnecessary files" >> analysis-report.md
          fi

          if [ $HEALTH_SCORE -lt 90 ]; then
            echo "### 🔧 Medium Priority" >> analysis-report.md
            [ ! -f "CONTRIBUTING.md" ] && echo "- Add CONTRIBUTING.md for collaboration guidelines" >> analysis-report.md
            [ ! -f "SECURITY.md" ] && echo "- Add SECURITY.md for security policy" >> analysis-report.md
          fi

          # Add framework-specific recommendations
          case "${{ steps.project-detection.outputs.frameworks }}" in
            *"react"*)
              echo "### ⚛️ React-Specific Recommendations" >> analysis-report.md
              echo "- Consider adding React DevTools configuration" >> analysis-report.md
              echo "- Set up component testing with React Testing Library" >> analysis-report.md
              ;;
            *"nextjs"*)
              echo "### 🚀 Next.js-Specific Recommendations" >> analysis-report.md
              echo "- Configure Next.js performance monitoring" >> analysis-report.md
              echo "- Set up SEO optimization" >> analysis-report.md
              ;;
          esac

          echo "" >> analysis-report.md
          echo "---" >> analysis-report.md
          echo "*Generated by Claude-Init Project Intelligence System*" >> analysis-report.md

      - name: Upload Analysis Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: project-analysis-${{ github.run_number }}
          path: |
            project-analysis.json
            project-analysis-human.txt
            analysis-report.md
            npm-audit.json
            safety-report.json
            go-modules.txt
          retention-days: 30

      - name: Comment on Pull Request
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = './analysis-report.md';

            if (fs.existsSync(path)) {
              const report = fs.readFileSync(path, 'utf8');

              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## 🤖 Automated Project Analysis\n\n${report}\n\n<details>\n<summary>View detailed analysis</summary>\n\nDetailed analysis artifacts are available in the workflow run artifacts.\n\n</details>`
              });
            }

      - name: Create or Update Analysis Issue
        if: github.event_name == 'schedule' && steps.health-score.outputs.health_score < 80
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('./analysis-report.md', 'utf8');

            // Look for existing analysis issue
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['automated-analysis', 'health-check'],
              state: 'open'
            });

            const title = `🔍 Project Health Analysis - Score: ${{ steps.health-score.outputs.health_score }}/100`;
            const body = `${report}\n\n**Automated Analysis**: This issue was created by the project intelligence system due to health score below 80.\n\n**Next Steps**:\n1. Review the recommendations above\n2. Implement high-priority improvements\n3. Re-run analysis to verify improvements\n\n---\n*This issue will be automatically updated on future analysis runs.*`;

            if (issues.data.length === 0) {
              // Create new issue
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['automated-analysis', 'health-check', 'enhancement']
              });
            } else {
              // Update existing issue
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issues.data[0].number,
                title: title,
                body: body
              });
            }

      - name: Summary
        run: |
          echo "## 📋 Analysis Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Project Type | ${{ steps.project-detection.outputs.project_type }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Primary Language | ${{ steps.project-detection.outputs.primary_language }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Frameworks | ${{ steps.project-detection.outputs.frameworks }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Maturity Score | ${{ steps.project-detection.outputs.maturity_score }}/100 |" >> $GITHUB_STEP_SUMMARY
          echo "| Health Score | ${{ steps.health-score.outputs.health_score }}/100 |" >> $GITHUB_STEP_SUMMARY
          echo "| Health Status | ${{ steps.health-score.outputs.health_emoji }} ${{ steps.health-score.outputs.health_status }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Analysis completed successfully!" >> $GITHUB_STEP_SUMMARY